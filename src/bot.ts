import TelegramBot       from 'node-telegram-bot-api'
import { prisma }        from './index'
import {
  compact,
  isNil,
}                        from 'lodash'
import { checkSchedule } from './utils/checkSchedule'
import { delay }         from './utils/utils'



const checkScheduleBot = async ( bot: TelegramBot ): Promise<string | boolean> => {
  try {
    const check = await checkSchedule()
    if ( check.isChanged ) {
      const chatIds = (await prisma.signed_chats.findMany()).map( obj => obj.id )
      for ( const chatId of chatIds ) bot.sendMessage( chatId, `‚ö† –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! ${check.text}` )
    }
    return check.isChanged
  } catch ( e ) {
    // @ts-ignore
    return 'message' in e ? e.message : e || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
  }
}

export const activateBot = async () => {
  const bot = new TelegramBot( process.env.BOT_TOKEN, { polling: true } )

  await bot.setMyCommands( [
    {
      command:     'sign',
      description: '–ü–æ–¥–ø–∏—Å–∞—Ç—å –∫–∞–Ω–∞–ª –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
    },
    {
      command:     'unsign',
      description: '–û—Ç–ø–∏—Å–∞—Ç—å –∫–∞–Ω–∞–ª –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
    },
    {
      command:     'check',
      description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π',
    },
  ] )

  bot.onText( /^\/check(@kojem9ka_bot)?$/, async ( msg, match ) => {
    const chat_id = msg.chat.id
    const message_id = (await bot.sendMessage( chat_id, 'üí¨ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...' )).message_id
    const check = await checkScheduleBot( bot )
    if ( check === true ) {
      await bot.deleteMessage( chat_id, message_id.toString() )
    } else {
      const memory = await prisma.memory.findUnique( { where: { id: 1 } } )
      await bot.editMessageText( compact( [ `üò¥ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`, memory?.date ] ).join( ':\n' ), { chat_id, message_id } )
    }
    if ( typeof check === 'string' )
      await bot.sendMessage( chat_id, `–û—à–∏–±–∫–∞: ${check}` )
  } )

  bot.onText( /^\/sign(@kojem9ka_bot)?$/, async ( msg, match ) => {
    const chat_id = msg.chat.id.toString()
    const founded = await prisma.signed_chats.findUnique( { where: { id: chat_id } } )
    if ( isNil( founded ) ) {
      await prisma.signed_chats.create( { data: { id: chat_id } } )
      await bot.sendMessage( chat_id, `‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!` )
    } else {
      await bot.sendMessage( chat_id, `ü§ì –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —á–∞—Ç —É–∂–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.` )
    }
  } )

  bot.onText( /^\/unsign(@kojem9ka_bot)?$/, async ( msg, match ) => {
    const chat_id = msg.chat.id.toString()
    const founded = await prisma.signed_chats.findUnique( { where: { id: chat_id } } )
    if ( isNil( founded ) ) {
      await bot.sendMessage( chat_id, `ü§ì –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —á–∞—Ç –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.` )
    } else {
      await prisma.signed_chats.delete( { where: { id: chat_id } } )
      await bot.sendMessage( chat_id, `‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –ù–ï –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã ü§ê` )
    }
  } )

  do {
    await checkScheduleBot( bot )
    await delay( 1000 * 60 * 25 )
  } while ( true )
}
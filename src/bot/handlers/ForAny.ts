import { checkScheduleBot } from '../methods'
import { prisma }           from '../../index'
import { isNil }            from 'lodash'
import { bot }              from '../bot'
import { botCommand }       from '../utils'
import { scheduleFileName } from '../../utils/utils'



bot.onText( botCommand( 'file' ), async ( msg, match ) => {
  const memory = await prisma.memory.findUnique( { where: { id: 1 } } )
  bot.sendDocument( msg.chat.id, memory?.file_id!, undefined, {
    filename:    scheduleFileName( memory?.date || '' ),
    contentType: 'xls',
  } ).then()
} )

bot.onText( botCommand( 'check' ), async ( msg, match ) => checkScheduleBot( await bot.sendMessage( msg.chat.id, 'üí¨ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...' ) ) )

bot.onText( botCommand( 'subscribe' ), async ( msg, match ) => {
  const chat_id = msg.chat.id.toString()
  const founded = await prisma.subscribed_chat.findUnique( { where: { id: chat_id } } )
  if ( isNil( founded ) ) {
    await prisma.subscribed_chat.create( { data: { id: chat_id } } )
    await bot.sendMessage( chat_id, `‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!` )
  } else {
    await bot.sendMessage( chat_id, `ü§ì –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —á–∞—Ç —É–∂–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.` )
  }
} )

bot.onText( botCommand( 'un_subscribe' ), async ( msg, match ) => {
  const chat_id = msg.chat.id.toString()
  const founded = await prisma.subscribed_chat.findUnique( { where: { id: chat_id } } )
  if ( isNil( founded ) ) {
    await bot.sendMessage( chat_id, `ü§ì –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —á–∞—Ç –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.` )
  } else {
    await prisma.subscribed_chat.delete( { where: { id: chat_id } } )
    await bot.sendMessage( chat_id, `‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –ù–ï –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã ü§ê` )
  }
} )